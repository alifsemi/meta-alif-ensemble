#
# This file is your local configuration file and is where all local user settings
# are placed. The comments in this file give some guide to the options a new user
# to the system might want to change but pretty much any configuration option can
# be set in this file. More adventurous users can look at local.conf.extended
# which contains other examples of configuration which can be placed in this file
# but new users likely won't need any of them initially.
#
# Lines starting with the '#' character are commented out and in some cases the
# default values are provided as comments to show people example syntax. Enabling
# the option is a question of removing the # character and making any change to the
# variable as required.

#
# Machine Selection
#
# You need to select a specific machine to target the build with. There are a selection
# of emulated machines available which can boot and run in the QEMU emulator:
#
#MACHINE ?= "qemuarm"
#MACHINE ?= "qemuarm64"
#MACHINE ?= "qemumips"
#MACHINE ?= "qemumips64"
#MACHINE ?= "qemuppc"
#MACHINE ?= "qemux86"
#MACHINE ?= "qemux86-64"
#
# This sets the default machine to be qemux86-64 if no other machine is selected:
MACHINE ??= "qemux86-64"

#
# Where to place downloads
#
# During a first build the system will download many different source code tarballs
# from various upstream projects. This can take a while, particularly if your network
# connection is slow. These are all stored in DL_DIR. When wiping and rebuilding you
# can preserve this directory to speed up this part of subsequent builds. This directory
# is safe to share between multiple builds on the same machine too.
#
# The default is a downloads directory under TOPDIR which is the build directory.
#
#DL_DIR ?= "${TOPDIR}/downloads"

#
# Where to place shared-state files
#
# BitBake has the capability to accelerate builds based on previously built output.
# This is done using "shared state" files which can be thought of as cache objects
# and this option determines where those files are placed.
#
# You can wipe out TMPDIR leaving this directory intact and the build would regenerate
# from these files if no changes were made to the configuration. If changes were made
# to the configuration, only shared state files where the state was still valid would
# be used (done using checksums).
#
# The default is a sstate-cache directory under TOPDIR.
#
#SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

#
# Where to place the build output
#
# This option specifies where the bulk of the building work should be done and
# where BitBake should place its temporary files and output. Keep in mind that
# this includes the extraction and compilation of many applications and the toolchain
# which can use Gigabytes of hard disk space.
#
# The default is a tmp directory under TOPDIR.
#
#TMPDIR = "${TOPDIR}/tmp"


#
# Package Management configuration
#
# This variable lists which packaging formats to enable. Multiple package backends
# can be enabled at once and the first item listed in the variable will be used
# to generate the root filesystems.
# Options are:
#  - 'package_deb' for debian style deb files
#  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
#  - 'package_rpm' for rpm style packages
# E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
# We default to ipk:
PACKAGE_CLASSES ?= "package_ipk"

#
# SDK target architecture
#
# This variable specifies the architecture to build SDK items for and means
# you can build the SDK packages for architectures other than the machine you are
# running the build on (i.e. building i686 packages on an x86_64 host).
# Supported values are i686 and x86_64
#SDKMACHINE ?= "i686"

#
# Extra image configuration defaults
#
# The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
# images. Some of these options are added to certain image types automatically. The
# variable can contain the following options:
#  "dbg-pkgs"       - add -dbg packages for all installed packages
#                     (adds symbol information for debugging/profiling)
#  "src-pkgs"       - add -src packages for all installed packages
#                     (adds source code for debugging)
#  "dev-pkgs"       - add -dev packages for all installed packages
#                     (useful if you want to develop against libs in the image)
#  "ptest-pkgs"     - add -ptest packages for all ptest-enabled packages
#                     (useful if you want to run the package test suites)
#  "tools-sdk"      - add development tools (gcc, make, pkgconfig etc.)
#  "tools-debug"    - add debugging tools (gdb, strace)
#  "eclipse-debug"  - add Eclipse remote debugging support
#  "tools-profile"  - add profiling tools (oprofile, lttng, valgrind)
#  "tools-testapps" - add useful testing tools (ts_print, aplay, arecord etc.)
#  "debug-tweaks"   - make an image suitable for development
#                     e.g. ssh root access has a blank password
# There are other application targets that can be used here too, see
# meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
# We default to enabling the debugging tweaks.
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

#
# Additional image features
#
# The following is a list of additional classes to use when building images which
# enable extra features. Some available options which can be included in this variable
# are:
#   - 'buildstats' collect build statistics
#   - 'image-mklibs' to reduce shared library files size for an image
#   - 'image-prelink' in order to prelink the filesystem image
# NOTE: if listing mklibs & prelink both, then make sure mklibs is before prelink
# NOTE: mklibs also needs to be explicitly enabled for a given image, see local.conf.extended
USER_CLASSES ?= "buildstats image-mklibs image-prelink"


#
# Runtime testing of images
#
# The build system can test booting virtual machine images under qemu (an emulator)
# after any root filesystems are created and run tests against those images. It can also
# run tests against any SDK that are built. To enable this uncomment these lines.
# See classes/test{image,sdk}.bbclass for further details.
#IMAGE_CLASSES += "testimage testsdk"
#TESTIMAGE_AUTO_qemuall = "1"

#
# Interactive shell configuration
#
# Under certain circumstances the system may need input from you and to do this it
# can launch an interactive shell. It needs to do this since the build is
# multithreaded and needs to be able to handle the case where more than one parallel
# process may require the user's attention. The default is iterate over the available
# terminal types to find one that works.
#
# Examples of the occasions this may happen are when resolving patches which cannot
# be applied, to use the devshell or the kernel menuconfig
#
# Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
# Note: currently, Konsole support only works for KDE 3.x due to the way
# newer Konsole versions behave
#OE_TERMINAL = "auto"
# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

#
# Disk Space Monitoring during the build
#
# Monitor the disk space during the build. If there is less that 1GB of space or less
# than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
# shutdown the build. If there is less that 100MB or 1K inodes, perform a hard abort
# of the build. The reason for this is that running completely out of space can corrupt
# files and damages the build in ways which may not be easily recoverable.
# It's necessary to monitor /tmp, if there is no space left the build will fail
# with very exotic errors.
BB_DISKMON_DIRS ??= "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

#
# Shared-state files from other locations
#
# As mentioned above, shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
# NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
# at the end as shown in the examples below. This will be substituted with the
# correct path within the directory structure.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
#file://.* file:///some/local/dir/sstate/PATH"


#
# Qemu configuration
#
# By default qemu will build with a builtin VNC server where graphical output can be
# seen. The two lines below enable the SDL backend too. By default libsdl2-native will
# be built, if you want to use your host's libSDL instead of the minimal libsdl built
# by libsdl2-native then uncomment the ASSUME_PROVIDED line below.
PACKAGECONFIG_append_pn-qemu-system-native = " sdl"
PACKAGECONFIG_append_pn-nativesdk-qemu = " sdl"
#ASSUME_PROVIDED += "libsdl2-native"

#
# Hash Equivalence
#
# Enable support for automatically running a local hash equivalence server and
# instruct bitbake to use a hash equivalence aware signature generator. Hash
# equivalence improves reuse of sstate by detecting when a given sstate
# artifact can be reused as equivalent, even if the current task hash doesn't
# match the one that generated the artifact.
#
# A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format
#
#BB_HASHSERVE = "auto"
#BB_SIGNATURE_HANDLER = "OEEquivHash"

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "1"

#
# APSS build configuration start
#
# BL32_IN_XIP_MEM - Chooses to boot bl32.bin from XiP or RAM
# Supported values are,
#  "1" - boot bl32.bin from XiP memory
#  "0" - boot bl32.bin from RAM
# Default value: "1"
#BL32_IN_XIP_MEM = "1"

# BL32_XIP_BASE - A hex address indicating the load/boot address
# of bl32.bin is executed from XiP memory i.e if BL32_IN_XIP_MEM
# is "1" else unused. This address should be 4MB aligned i.e., the
# last 3 nibbles of the hex address should be zero.
# Default value: "0x80002000"
#BL32_XIP_BASE = "0x80002000"

# XIP_KERNEL_LOAD_ADDR - A hex address indicating the boot address of xipImage.
# This address should be 32bit aligned i.e. the 5 bits of LSB should be 0.
# Default value: "0x80020000"
#XIP_KERNEL_LOAD_ADDR = "0x80020000"

# KERNEL_DTB_ADDR - A hex address indicating the location of Linux
# device tree blob (dtb). Default value: "0x80010000"
#KERNEL_DTB_ADDR = "0x80010000"

# KERNEL_MTD_START_ADDR - A hex address indicating the MTD partition
# start address where the rootfs in cramfs-xip format is stored.
# Default value: "0x80300000"
#KERNEL_MTD_START_ADDR = "0x80300000"

# KERNEL_MTD_LEN - A hex value indicating the size (in bytes) of
# MTD partition starting from the address denoted by
# KERNEL_MTD_START_ADDR. Default value: "0x200000" (2 Megabytes).
# Note: Minimum value of KERNEL_MTD_LEN should be at least "0x100000"(1 MB).
#KERNEL_MTD_LEN = "0x200000"

# UART - Selects which UART is used as the boot/serial console for the APSS.
# The variable can contain the following values:
#  "2" - UART2 is used as the serial console for the APSS
#  "4" - UART4 is used as the serial console for the APSS
# Default value: "2"
#UART = "2"

# HYPRAM_EN - Enables OSPI0 NOR flash (0xA0000000) as a HyperRAM.
# Supported values are,
#  "1" - enable OSPI0 as a HyperRAM.
#  "0" - disable OSPI0 as a HyperRAM.
# Default value: "1"
#HYPRAM_EN = "1"

# FLASH_EN - Enables OSPI1 NOR flash (0xC0000000) in XiP mode.
# Supported values are,
#  "1" - enable OSPI1 in XiP mode.
#  "0" - disable OSPI1 in XiP mode.
# Default value: "0"
#FLASH_EN = "0"

#
# AES_EN - Enables code in the arm-tf to decrypt the AES encrypted
# images stored in the OSPI1 NOR flash memory (0xC0000000).
# Supported values are,
# "1" - Decrypt AES encrypted XiP images in the OSPI1 NOR.
# "0" - Execute XiP images in the OSPI1 NOR as is.
# Default value: "0"
#

#
# AES_ENC_KEY - The 16bytes AES key used to decrypt the AES encrypted
# images stored in the OSPI1 NOR flash memory (0xC0000000). The 16bytes
# AES key used for decryption should be the same used for encrypting images.
# Supported values are,
# Any 16bytes string. For example: "0123456789ABCDEF"
# NULL string (""), if AES_EN is set to "0"
#

#
# Extra distro features configuration defaults
#
# The DISTRO_FEATURES variable allows addition of software support in the
# distribution for various features.
# The variable can contain the following options:
#  "apss-mhu"       - add message handling unit (MHU) related packages
#                     and Linux kernel configs into the images.
#  "apss-hwsem"     - add hardware semphore (HWSEM) related packages
#                     and Linux kernel configs into the images.
#  "apss-ethernet"  - add ethernet related packages and Linux kernel configs
#                     into the images.
#  "apss-debug"     - add gdbserver debug tool and configs into the image.
#  "apss-usb"       - add USB related packages and Linux kernel configs
#                     into the images.
#  "apss-spi"       - add serial peripheral interface (SPI) related packages
#                     and Linux kernel configs into the images.
#  "apss-i3c"       - add improved inter-integrated circuit (I3C) related
#                     packages and Linux kernel configs into theimages.
#  "apss-utimer"    - add Utimer related packages and Linux kernel configs
#                     into the images.
#  "apss-iot"       - add internet of thing (IoT) related packages.
#  "apss-crc"       - add cyclic redundancu check (CRC) related packages
#                     and Linux kernel configs into the images.
#  "apss-dac12"     - add digital to analog converter (DAC) related packages
#                     and Linux kernel configs into the images.
#DISTRO_FEATURES_append += "apss-mhu apss-i3c"
#
# APSS build configuration end
#

#
# HYPRAM_AS_LOWMEM - Config option to use HyperRAM (OSPI0) as low memory.
# Supported values are,
#  "1" - uses HyperRAM as low memory by the Linux Kernel.
#  "0" - uses SRAM0 and SRAM1 as low memory by the Linux Kernel.
# Default value: "0"
#HYPRAM_AS_LOWMEM = "0"
#
